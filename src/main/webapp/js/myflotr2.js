function drawLineBarChart(data, labels, yticks, containerid, xlabel, ylabel, title){
	var container = document.getElementById(containerid);
	
	var option = {
		colors: ['#00A8F0', '#C0D800', '#CB4B4B', '#4DA74D', '#9440ED'],//线条的颜色
		ieBackgroundColor:'#3ec5ff',//选中时的背景颜色
		//title:title,//标题
		subtitle:title, //子标题
		shadowSize:5,//线条阴影
		defaultType:'lines',//图表类型,可选值:bars,bubbles,candles,gantt,lines,markers,pie,points,radar
		HtmlText:false,//是使用html或者canvas显示 true:使用html	false:使用canvas
		fontColor:'#50b7dc',//字体颜色
		fontSize:7.5,//字体大小
		resolution:1,				//分辨率 数字越大越模糊
		parseFloat:true,		 //是否将数据转化为浮点型
		xaxis: {
			ticks:labels, // 自定义X轴
			minorTicks: null,
			showLabels:true,	 // 是否显示X轴刻度
			showMinorLabels:true,
			labelsAngle:15,		//x轴文字倾斜角度
			title:xlabel,			 //x轴标题
			titleAngle:0,			//x轴标题倾斜角度
			noTicks:12,				 //当使用自动增长时,x轴刻度的个数
			minorTickFreq:null, //
			tickFormatter: Flotr.defaultTickFormatter,	 //刻度的格式化方式
			tickDecimals:0,		//刻度小数点后的位数
			min:null,					//刻度最小值	X轴起点的值
			max:null,					//刻度最大值
			autoscale:true,
			autoscaleMargin:0,
			color:null,	 //x轴刻度的颜色
			mode:'normal',
			timeFormat:null,	
			timeMode:'UTC',		 //For UTC time ('local' for local time).
			timeUnit:'year',	 //时间单位 (millisecond, second, minute, hour, day, month, year) 
			scaling:'linear',	//linear or logarithmic
			base:Math.E,
			titleAlign:'center',						//标题对齐方式
			margin:true
		}, 
		x2axis:{ 			 },
		yaxis:{//// => Y轴配置与X轴类似
	 		ticks: yticks,	
	 		minorTicks: null,			// => format: either [1, 3] or [[1, 'a'], 3]
	 		showLabels: true,			// => setting to true will show the axis ticks labels, hide otherwise
	 		showMinorLabels: false,// => true to show the axis minor ticks labels, false to hide
	 		labelsAngle: 0,				// => labels' angle, in degrees
	 		title: ylabel,					 	 // => axis title
	 		titleAngle: 90,				// => axis title's angle, in degrees
	 		noTicks: null,						// => number of ticks for automagically generated ticks
	 		minorTickFreq: null,	 	 // => number of minor ticks between major ticks for autogenerated ticks
	 		tickFormatter: Flotr.defaultTickFormatter, // => fn: number, Object -> string
	 		tickDecimals: 'no',		// => no. of decimals, null means auto
	 		min: 0,// => min. value to show, null means set automatically
	 		max: yticks[yticks.length-1][1]*6/5,// => max. value to show, null means set automatically
	 		autoscale: false,			// => Turns autoscaling on with true
	 		autoscaleMargin: 0,		// => margin in % to add if auto-setting min/max
	 		color: null,					 	 // => The color of the ticks
	 		scaling: 'linear',		 	 // => Scaling, can be 'linear' or 'logarithmic'
	 		base: Math.E,
	 		titleAlign: 'center',
	 		margin: true				 		// => Turn off margins with false
		},
		y2axis:{ },
		grid: {
	 		color: '#999999',			// => 表格外边框和标题以及所有刻度的颜色
	 		backgroundColor: null, // => 表格背景颜色
	 		backgroundImage: null, // => 表格背景图片
	 		watermarkAlpha: 0.4,	 // => 水印透明度
	 		tickColor: '#aaaaaa',	// => 表格内部线条的颜色
	 		labelMargin: 5,				// => margin in pixels
	 		verticalLines: true,	 // => 表格内部是否显示垂直线条
	 		minorVerticalLines: null, // => whether to show gridlines for minor ticks in vertical dir.
	 		horizontalLines: true, // => 表格内部是否显示水平线条
	 		minorHorizontalLines: null, // => whether to show gridlines for minor ticks in horizontal dir.
	 		outlineWidth: 0,			 // => 表格外边框的粗细
	 		outline : 'nsew',			// => 超出显示范围后的显示方式
	 		circular: false				// => 是否以环形的方式显示
		},
		mouse:{
	 		track: true,					// => 为true时,当鼠标移动到每个折点时,会显示折点的坐标
	 		trackAll: true,			 // => 为true时,当鼠标在线条上移动时,显示所在点的坐标
	 		position: 'se',				// => 鼠标事件显示数据的位置 (default south-east)
	 		relative: false,			 // => 当为true时,鼠标移动时,即使不在线条上,也会显示相应点的数据
	 		trackFormatter: Flotr.defaultTrackFormatter, // => formats the values in the value box
	 		margin: 5,// => margin in pixels of the valuebox
	 		lineColor: '#FF3F19',	// => 鼠标移动到线条上时,点的颜色
	 		trackDecimals: 0,			// => 数值小数点后的位数
	 		sensibility: 2,				// => 值越小,鼠标事件越精确
	 		trackY: true,					// => whether or not to track the mouse in the y axis
	 		radius: 3,// => radius of the track point
	 		fillColor: null,		 		// => color to fill our select bar with only applies to bar and similar graphs (only bars for now)
	 		fillOpacity: 0.4			 // => o
		}
	};
 
	// Draw Graph
	Flotr.draw(container, data, option);
}

function basic_pie(data, containerid) {
var container = document.getElementById(containerid);
 var graph = Flotr.draw(container, data, 
  {fontColor:'#000000',
   subtitle:'所有记录在案工单原因分类',
   HtmlText : false,
   grid : {
	 outlineWidth:0,
     verticalLines : false,
     horizontalLines : false
   },
   xaxis : { showLabels : false },
   yaxis : { showLabels : false },
   pie : {
     show : true, 
     explode : 10
   },
   mouse : { track : true },
   legend : {
     position : 'se',
     backgroundColor : '#D2E8FF'
   }
 });
}

function draw(json, containerid, lineorbar, title, xname, yname){
	var count = [];
	var labels=[];
	var maxy = 0;
	var valid = false;
	for(var i=0;i<json.length;i++){
		count.push([i+1,json[i][0]==null&&lineorbar?(undefined):(json[i][0]==null?0:json[i][0])]);
		if(maxy<json[i][0]){
			maxy=json[i][0];
		}
		labels.push([i+1,json[i][1]]);
		if(!valid && json[i][0]!=null){
			valid=true;
		}
	}
	var yticks=[];
	if(maxy==0){maxy=100;}
	var celly=Math.ceil(maxy/5);
	for(var i=0;i<=5;i++){
		yticks.push([celly*i, celly*i]);
	}
	var data;
	if(lineorbar){
		if(!valid){
			count=undefined;
		}else{
			count = [[0.5, count[0][1]]].concat(count).concat([[count.length+0.5,count[count.length-1][1]]]);;
		}
		data = [
			{ data : count, label :xname ,lines : { show : true }, points : { show : true }}
		];
	}else{
		data = [
			{ data : count, label :xname ,bars : { show : true }, points : { show : true }}
		];
	}
	drawLineBarChart(data, labels, yticks, containerid, yname, xname, title);
}

function drawtaskcount(json, containerid){
	var count = [];
	var labels=[];
	for(var i=0;i<json.length;i++){
		count.push([i+1,json[i][0]]);
		labels.push([i+1,json[i][2]]);
	}
	var yticks=[];
	var maxy = 0;
	for(var i=0;i<count.length;i++){
		if(maxy<count[i][1])
			maxy=count[i][1];
	}
	maxy = Math.ceil(maxy/100)*100;
	for(var i=0;i<=5;i++){
		yticks.push([maxy*i/5, maxy*i/5]);
	}
	var data = [
		{ data : count, label :'完成工单数' ,bars : { show : true }, points : { show : true }}
	];
	drawLineBarChart(data, labels, yticks, containerid, '月份', '完成工单数', '完成工单');
}
function drawtaskscore(json, containerid){
	var count = [];
	var labels=[];
	for(var i=0;i<json.length;i++){
		count.push([i+1,json[i][1]==null?undefined:json[i][1]]);
		labels.push([i+1,json[i][2]]);
	}
	var yticks=[];
	var maxy = 100;
	for(var i=0;i<=5;i++){
		yticks.push([maxy*i/5, maxy*i/5]);
	}
	if(count.length>0){
		count = [[0.8, count[0][1]]].concat(count).concat([[count.length+0.2,count[count.length-1][1]]]);;
	}
	var data = [
		{ data : count, label :'月平均sla分数' ,lines : { show : true }, points : { show : true }}
	];
	
	drawLineBarChart(data, labels, yticks, containerid, '月份', '月平均分', '完成工单月平均sla得分');
}
function drawtaskpie(jsondata, containerid){
	var data = [];
	var outtercount = jsondata.length>5?5:jsondata.length;
	var name;
	for(var i=0;i<outtercount;i++){
		name = jsondata[i][1];
		if(name.length>7){
			name=name.substr(0,7)+'...';
		}
		data.push({data:[[0,jsondata[i][0]]], label:name});
	}
	if(data.length>1){
		data[data.length-1].pie={explode : 20};
	}
	if(jsondata.length>5){
		var count = 0;
		for(var i=5;i<jsondata.length;i++){
			count += jsondata[i][0];
		}
		//data.push([[[0, count]], '其他']);
		data.push({data:[[0,count]], label:'其他'});
	}
	basic_pie(data, containerid);
}
